## The name of the service to be referenced in AWS.
## Change this when the project is created.
service:
  name: change-the-name-of-this-variable-to-your-service

frameworkVersion: ">=1.0.0 <2.0.0"

package:
  individually: true
  include:
    - src/**/*.js
    - src/**/*.map.js
  exclude:
    - src/**/*.test.js
    - node_modules/aws-sdk/**
    - coverage/**

plugins:
  - serverless-webpack
  - serverless-offline

custom:
  apiVersion: v1
  webpack:
    includeModules:
      forceExclude:
        - aws-sdk

  ## Env variables
  local:
    DEBUG: 'serverless*'
    stage: local
    enableDomain: true
    DYNAMO_TABLE_NAME: ''

  dev:
    DEBUG: 'serverless*'
    stage: dev
    enableDomain: true
    DYNAMO_TABLE_NAME: ''

  staging:
    DEBUG: 'serverless*'
    stage: staging
    enableDomain: true
    DYNAMO_TABLE_NAME: ''

  prod_us:
    DEBUG: 'serverless*'
    stage: prod
    enableDomain: true
    DYNAMO_TABLE_NAME: ''

  region: ${opt:region}
  stage: ${self:custom.${opt:target}.stage}

  serverless-offline:
    host: 127.0.0.1
    port: 50512

provider:
  name: aws
  runtime: ${env:NODE_RUNTIME, 'nodejs8.10'}
  region: ${opt:region}

  ## Lambda timeout options. This can be boosted to 5 min max.
  timeout: 29
  ## Lambda memory size
  memorySize: 512

  ## The AWS profile to be accessed during meta-deta lookup. Should match your AWS_CLI profile.
  profile: 'default'

  stage: ${self:custom.stage}
  role: THE-ARN-OF-YOUR-LAMBDA-IAM-ROLE
  deploymentBucket:
    name: everlook-${self:custom.stage}-continuous-delivery
    serverSideEncryption: AES256

  # Add your above variables in each env to this environment section
  # This gets piped into your app inside of process.env
  environment:
    STAGE: ${self:custom.stage}
    DEBUG: ${self:custom.${self:custom.stage}.DEBUG, ''}
    DYNAMO_TABLE_NAME: ${self:custom.${self:custom.stage}.DYNAMO_TABLE_NAME, ''}

  apiKeys:
    - ${self:service}-${self:custom.stage}-apikey

functions:
  ## This will be the name of the lambda in AWS
  api:
    ## Describes where this function lives in the pwd
    handler: src/lambda.handler
    ## The name of this lambda function
    name: ${self:custom.apiVersion}-${self:service}-${self:custom.stage}
    ## env variables to be injected into process.env for each lambda function
    environment:
      DEBUG: ${self:custom.${self:custom.stage}.DEBUG}

    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
          private: true

resources:
  # This is used to override the default naming conventions
  Resources:
    # ApiGatewayRestApi:
    #   Type: AWS::ApiGateway::RestApi
    #   Properties:
    #     Name: ${self:custom.apiVersion}-${self:service}
